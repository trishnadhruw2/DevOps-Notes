
What is Container Orchestration:
Container Orchiestration is the process of depoying and maintaining large number os containers and servicess for the application to run as intended.
 
It Performed to control and automate tasks like:
- Deployment of Containers
- Scaling
- Resource allocation
- Load Balancing
- Health Monitoring  

Docker Swarm:
Docker swarm is a container orchestration tool part of the docker engine. with swarm developers and IT administrators can deploy and manage a cluster of docker nodes as a single virtual system.
A Docker swarm is group of eighter physical or virtual machines that are running the docker application and that have been configured to join together in a cluster.

1. Service :
	Service defines the tasks that need to be executed on the manager and worker nodes.

2. Tasks:
	Tasks refer to the docker containers that execute the commands defined in the service.

3. Manager Node:
	The Manager node is responsible for:
		- Accepting commands and creating service objects.
		- Allocating IP addresses to tasks
		- Assigning tasks to nodes
		- Instructing a worker to run a task
4. Worker Node:
	Worker nodes are responsible for checking assigned tasks and executing containers.

=========================================================================================================

Lab Setup For Docker Swarm:
AMI Linux2 Lab:

AMI Linux2 Server1 = Manager (192.168.30.113)
AMI Linux2 Server2 = Worker1 (192.168.30.212)
AMI Linux2 Server3 = Worker2 (192.168.30.136)
AMI Linux2 Server4 = Worker3 (192.168.30.216)

Update Manger Host File:
#vim /etc/hosts

192.168.30.113 manager.example.com manager
192.168.30.212 worker1.example.com worker1
192.168.30.136 worker1.example.com worker2
192.168.30.216 worker1.example.com worker3
:wq
g
Note: Install docker on all above system.
=========================================================================================================
Step1: create docker manager and worker in swarm:

set hostname to manager system
#hostnamectl  set-hostname  manager1.example.com

For create swarm manager
#docker swarm init --advertise-addr 192.168.30.113
or
#docker swarm init

for add swarm worker
set hostname to worker system
#hostnamectl  set-hostname  worker1.example.com

go to worker system and run following command:

docker swarm join --token SWMTKN-1-37drlrd4jut24kj8agyu5nmjc2vdyhc7a72ecbjop2we0cxtsx-51b1dn918u91f7dmqtgi7yoky 192.168.30.113:2377


go work manager system and following command for verify
#docker  node   ls

for help
#docker  swarm  --help
#docker  swarm  join-token  manager
(add avbove token on system which you want to secondary manager system)

#docker  swarm  join-token  worker
(add avbove token to join worker on worker system)

go to worker1 system and following command for leave

#docker swarm  leave   --force

Now go to manager system and check node list
#docker   node   ls
=========================================================================================================
Step2:
#docker   node   ls
For show details

#docker node  --help
#docker node  inspect  manager1
#docker node  inspect  worker1


For promote worker as manager
#docker  node promote  worker1
#docker  node  ls

For demote  
#docker  node  demote  worker1
#docker   node   ls
=========================================================================================================
Step3:
docker swarm service
1. Replicated service
2. Global service

For a replicated service, you specify the number of identical tasks you want to run. For example, you decide to deploy an HTTP service with three replicas, each serving the same content. A global service is a service that runs one task on every node.


#docker  service  --help


#docker  service  create  --replicas  4  --name   web1  nginx
#docker  service  ls
#docker  service  ps  web1

For scale up 
#docker  service  --help
#docker  service  scale  web1=7
#docker  service  ps  web1

now go to worker1 and remove the running container
#docker  ls
#docker  rm -f 20 50

now go to manager and check
#docker service ls

also try from manager system to remove one container it will be start quickly


For remove all web1 services
#docker service rm web1
#docker service ls
=========================================================================================================
For create new service
#docker service create -d -p 80:80 --name webserver nginx
#docker service ps webserver
#docker service scale webserver=8

we can access above services from any node,no need separate ip address
access it from webbrowser with help of manager IP
#http:192.168.30.113

=========================================================================================================
Docker Swarm Visualizer:

(https://github.com/dockersamples/docker-swarm-visualizer)

To run in a docker swarm:

  #docker service create \
  --name=viz \
  --publish=8080:8080/tcp \
  --constraint=node.role==manager \
  --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
  dockersamples/visualizer


#docker service ls
access visualizer from webbrowser with help of manager IP
#http:192.168.1.10:8080

remove again all services of webserver
#docker service rm webserver
#docker service ps webserver

also check with docker visualizer

=========================================================================================================
Now run services in global mode
#docker  service  create  --mode=global  --name   webserver  nginx

this mode bydefault run one service on each node
#docker service ps webserver
#docker ps

or
check visualizer

remove again all services of webserver
#docker service rm webserver
#docker service ps webserver
=========================================================================================================
Now start number of container on specific targeted server

Start 3 service (container) on Manager
#docker  service  create  --replicas=3 --constraint="node.role==manager"  --name   web1  nginx

#docker service rm web1
#docker service ps web1

Start 7 services (container) on worker
#docker  service  create  --replicas=7 --constraint="node.role==worker"  --name   web1  nginx

==================================================================================================
if we want to run number of containers on specific worker with help of label

we can create label on two level:
1. Node level
2. Engine level

1. Node level:
first set label to worker1

#docker node update  --help | grep label
#docker node update  --label-add="ssd=true" worker1.example.com

#docker  service  create  --replicas=3 --constraint="node.labels.ssd==true"  --name   web1  nginx

check docker swarm visualizer container status

2. Engine level
Now create label worker2
go to worker2 system 

#vim /etc/docker/daemon.json
{
		  "labels"  :  ["name=sevenmentor"]
}
:wq

restart system

#systemctl   restart   docker

go to manager check label engin level

#docker node  inspect  worker2.example.com | less


now run service on worker2
#docker  service  create  --replicas=3 --constraint="engine.labels.name==sevenmentor"  --name   web1 nginx

